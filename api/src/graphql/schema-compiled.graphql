scalar Date

type Query {
  _: Boolean
  user(id: Int!): User!
  users(first: Int, after: ID, filters: UserFiltersInput, orderBy: UserOrderByInput): UserConnection!
}

type Mutation {
  Authenticate(input: AuthenticateInput!): AuthenticatePayload!
  _: Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  firstCursor: ID
  lastCursor: ID
  previousCursor: ID
}

enum Role {
  EMPLOYEE
  ADMIN
}

input UserFiltersInput {
  SEARCH: String
  USER_TYPE: UserType
}

input AuthenticateInput {
  email: String!
  password: String!
}

type AuthenticatePayload {
  user: User!
  token: String!
}

enum UserType {
  ADMIN
  EMPLOYEE
}

enum UserOrderByInput {
  ID_ASC
  ID_DESC
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  userType: UserType!
  avatar: String
  createdAt: Date!
}

type UserEdge {
  node: User!
  cursor: ID!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo
  totalCount: Int
}
