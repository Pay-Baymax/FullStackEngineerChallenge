directive @hasRole(role: [Role]) on OBJECT | FIELD_DEFINITION

type Query {
  _: Boolean
  review(id: Int!): Review!
  reviews(first: Int, after: ID, orderBy: ReviewOrderByInput): ReviewConnection!
  user(id: Int!): User!
  users(first: Int, after: ID, filters: UserFiltersInput, orderBy: UserOrderByInput): UserConnection!
}

enum ReviewOrderByInput {
  ID_ASC
  ID_DESC
  STATUS_ASC
  STATUS_DESC
}

type Assignment {
  createdAt: Date!
  id: Int!
  review: Review
  reviewee: User!
  status: AssignmentStatus!
  user: User!
}

type AssignmentEdge {
  node: Assignment!
  cursor: ID!
}

type AssignmentConnection {
  edges: [AssignmentEdge!]!
  pageInfo: PageInfo
  totalCount: Int
}

type User {
  address: String!
  assignmentStats: AssignmentStats!
  assignments(first: Int, after: ID, filters: AssignmentFiltersInput, orderBy: AssignmentOrderByInput): AssignmentConnection!
  avatar: String!
  birthday: Date
  createdAt: Date!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  mobilePhone: String!
  phone: String!
  rating: Float!
  reviews(first: Int, after: ID, filters: ReviewFiltersInput, orderBy: ReviewOrderByInput): ReviewConnection!
  reviewsFromUsers(first: Int, after: ID, filters: ReviewFiltersInput, orderBy: ReviewOrderByInput): ReviewConnection!
  reviewsSummary: ReviewSSummary!
  userType: UserType!
}

type Review {
  id: Int!
  rating: Int!
  comment: String!
  attitude: Int!
  communication: Int!
  growth: Int!
  dependability: Int!
  productivity: Int!
  initiative: Int!
  innovation: Int!
  createdAt: Date!
}

input CreateReviewInput {
  assignmentId: Int!
  comment: String!
  attitude: Int!
  communication: Int!
  growth: Int!
  dependability: Int!
  productivity: Int!
  initiative: Int!
  innovation: Int!
}

type CreateReviewPayload {
  review: Review!
}

input ReviewFiltersInput {
  USER_ID: Int
  REVIEWEE_ID: Int
}

enum ReviewOrderByInput {
  ID_ASC
  ID_DESC
  RATING_ASC
  RATING_DESC
}

type ReviewEdge {
  node: Review!
  cursor: ID!
}

type ReviewConnection {
  edges: [ReviewEdge!]!
  pageInfo: PageInfo
  totalCount: Int
}

scalar Date

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  firstCursor: ID
  lastCursor: ID
  previousCursor: ID
}

enum Role {
  EMPLOYEE
  ADMIN
}

input UserFiltersInput {
  SEARCH: String
  USER_TYPE: UserType
}

type DeleteUserPayload {
  user: User!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  avatar: String
  address: String
  phone: String
  mobilePhone: String
  birthday: Date
}

type UpdateUserPayload {
  user: User!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String
  avatar: String
  address: String
  phone: String
  mobilePhone: String
  birthday: Date
}

type CreateUserPayload {
  user: User!
}

input AuthenticateInput {
  email: String!
  password: String!
}

type AuthenticatePayload {
  user: User!
  token: String!
}

enum UserType {
  ADMIN
  EMPLOYEE
}

enum UserOrderByInput {
  ID_ASC
  ID_DESC
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  userType: UserType!
  avatar: String
  createdAt: Date!
}

type UserEdge {
  node: User!
  cursor: ID!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo
  totalCount: Int
}
